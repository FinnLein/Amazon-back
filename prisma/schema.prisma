generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  name       String   @unique
  avatarPath String   @default("/uploads/default-avatar.png") @map("avatar_path")
  role       EnumRole @default(USER)
  phone      String   @default("")
  
  verificationToken String? @default(cuid()) @map("verification_token")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Setting {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String   @unique
  slug        String   @unique
  description String
  price       Int
  images      String[]

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int?      @map("category_id")

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int?  @map("user_id")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String @unique
  slug        String @unique
  description String

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
  CANCELED
}

enum EnumRole {
  ADMIN
  USER
}
